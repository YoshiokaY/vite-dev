@use "sass:map";
@use "sass:math";
@use "sass:string";
@use "sass:list";
@use "variables" as *;

// メディアクエリ
// ------------------------------------------------
// 引数：$type      どのような範囲を指定するか
//                  sp      SPサイズ
//                  pc      PCサイズ
// 使い方：「spサイズ」の場合は「@include mq(sp) { }」
//        「pcサイズ」の場合は「@include mq() { }」
// デフォルトではモバイルファースト
// ------------------------------------------------
@mixin mq($type: pc, $value1: $brakePoint) {
  // １つの値を使って範囲指定する場合
  $operator: ">=";
  @if $type == sp {
    // PC用（spMaxサイズ < w）
    $operator: "<";
  } @else {
    // SP用（w <= spMaxサイズ）
    // そのままでOK
  }
  @media screen and (width #{$operator} math.div($value1, 16) + em) {
    @content;
  }
}

// ホバークエリ
// ------------------------------------------------
// キーボードフォーカスとホバーを一括で設定する
// ------------------------------------------------
@mixin hover() {
  @media (any-hover: hover) {
    &:hover {
      @content;
    }
  }

  &:focus-visible {
    @content;
  }
}

// SVGマスク
// ------------------------------------------------
// extendに登録したsvgアイコンをmask-imageで出力
// ------------------------------------------------
@mixin mask($svg, $color, $size: contain) {
  @extend %#{$svg};

  background-color: $color;
  mask-repeat: no-repeat;
  mask-position: center;
  mask-size: $size;
}

// フォントサイズ
// ------------------------------------------------
// PC/SPを一括で出力
// 引数：PC,SP
// ------------------------------------------------
@mixin fontsize($pcSize: list.nth($base, 1), $spSize: $pcSize) {
  $magnification: 1;
  @if $spDesign < 750 {
    // SPデザインが等倍だった場合最大サイズを2倍に変更
    $magnification: 2;
  } @else {
    // そのままでOK
  }
  @if $spFontVw == "true" {
    font-size: string.unquote("min(#{math.div(100, $spDesign) * $spSize}vw,#{math.div($spSize * $magnification, 10) + rem})");
  } @else {
    font-size: #{math.div($spSize, 10) + rem};
  }
  @include mq() {
    font-size: #{math.div($pcSize, 10) + rem};
  }
}
